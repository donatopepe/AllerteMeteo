using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Data;
using System.Runtime.InteropServices.WindowsRuntime;
using Microsoft.AspNetCore.Http;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.RegularExpressions;
using System.Net;
using MeteoAlert.Models;
using Microsoft.Data.Sqlite;
using MeteoAlert.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.Data.SqlClient;
using Microsoft.Extensions.Logging;

namespace MeteoAlert.Services
{
    public class WgetService : IHostedService, IDisposable
    {
        private Timer _timer;

        System.Diagnostics.ProcessStartInfo procStartInfo;
        System.Diagnostics.Process proc;

        double[] zonePerc = new double[5];
        //Tuple<double, double, double, double, double, Bitmap> myTuple = null;
        Tuple<bool, Bitmap, int> myTuple = null;
        string _QRY = "";
        int _ContInvioSMS = 0;
        DateTime _OrarioTerzoInvioSms;
        DateTime _oraInizioEventoLampinet;
        bool _eventoInCorso = false;
        string _result = "";
        string testoSms = "";

        //Per la Dependency Injection
        private readonly IConfiguration configuration;
        //private readonly ISqliteService myDb;
        private readonly IMsSqlService mySqlDb;
        private readonly AllarmiSMS mySms;
        private readonly IAdoMeteoService servizioMeteo;
        private readonly SendSmsMail _sendSmsMail;
        private string imageUrl;
        private Bitmap bitmap;
        private List<Rubrica> rubrica;
        private readonly ILogger<WgetService> _logger;
        private bool test = false;     //usata per fare dei test
        private bool _IsAllarmeInCorso = false;

        /*
 * PER VELOCIZZARE L'ESECUZIONE DEL MODELLO
 * HO CABLATO ALL'INTERNO DEL SOFTWARE LE
 * COORDINATE DELLA CIRCONFERENZA CHE DELIMITA
 * LA ZONA DA MONITORARE
 */
        int[,] _coordinateCirconferenza = new int[511, 3] { { 42,309,347 } ,
                                                              {43,298,358},
                                                              {44,291,365},
                                                              {45,285,371},
                                                              {46,278,378},
                                                              {47,274,382},
                                                              {48,270,386},
                                                              {49,266,390},
                                                              {50,262,394},
                                                              {51,258,398},
                                                              {52,254,402},
                                                              {53,251,405},
                                                              {54,248,408},
                                                              {55,246,410},
                                                              {56,243,413},
                                                              {57,240,416},
                                                              {58,238,418},
                                                              {59,235,421},
                                                              {60,232,424},
                                                              {61,229,427},
                                                              {62,227,429},
                                                              {63,225,431},
                                                              {64,223,433},
                                                              {65,221,435},
                                                              {66,219,437},
                                                              {67,217,439},
                                                              {68,215,441},
                                                              {69,213,443},
                                                              {70,211,445},
                                                              {71,209,447},
                                                              {72,206,450},
                                                              {73,205,451},
                                                              {74,203,453},
                                                              {75,201,455},
                                                              {76,200,456},
                                                              {77,198,458},
                                                              {78,197,459},
                                                              {79,195,461},
                                                              {80,193,463},
                                                              {81,192,464},
                                                              {82,190,466},
                                                              {83,188,468},
                                                              {84,187,469},
                                                              {85,185,471},
                                                              {86,184,472},
                                                              {    87,182,474      },
                                                              {    88,181,475      },
                                                              {    89,180,476      },
                                                              {    90,178,478      },
                                                              {    91,177,479      },
                                                              {    92,176,480      },
                                                              {    93,174,482      },
                                                              {    94,173,483      },
                                                              {    95,172,484      },
                                                              {    96,170,486      },
                                                              {    97,169,487      },
                                                              {    98,168,488      },
                                                              {    99,166,490      },
                                                              {    100,165,491     },
                                                              {    101,164,492     },
                                                              {    102,163,493     },
                                                              {    103,162,494     },
                                                              {    104,161,495     },
                                                              {    105,159,497     },
                                                              {    106,158,498     },
                                                              {    107,157,499     },
                                                              {    108,156,500     },
                                                              {    109,155,501     },
                                                              {    110,154,502     },
                                                              {    111,153,503     },
                                                              {    112,152,504     },
                                                              {    113,151,505     },
                                                              {    114,150,506     },
                                                              {    115,148,508     },
                                                              {    116,147,509     },
                                                              {    117,146,510     },
                                                              {    118,146,510     },
                                                              {    119,145,511     },
                                                              {    120,144,512     },
                                                              {    121,143,513     },
                                                              {    122,142,514     },
                                                              {    123,141,515     },
                                                              {    124,140,516     },
                                                              {    125,139,517     },
                                                              {    126,138,518     },
                                                              {    127,137,519     },
                                                              {    128,136,520     },
                                                              {    129,135,520     },
                                                              {    130,135,521     },
                                                              {    131,134,522     },
                                                              {    132,133,523     },
                                                              {    133,132,524     },
                                                              {    134,131,525     },
                                                              {    135,130,526     },
                                                              {    136,129,527     },
                                                              {    137,129,527     },
                                                              {    138,128,528     },
                                                              {    139,127,529     },
                                                              {    140,126,530     },
                                                              {    141,126,530     },
                                                              {    142,125,531     },
                                                              {    143,124,532     },
                                                              {    144,123,533     },
                                                              {    145,123,533     },
                                                              {    146,122,534     },
                                                              {    147,121,535     },
                                                              {    148,120,536     },
                                                              {    149,120,536     },
                                                              {    150,119,537     },
                                                              {    151,118,538     },
                                                              {    152,117,538     },
                                                              {    153,117,539     },
                                                              {    154,116,540     },
                                                              {    155,115,541     },
                                                              {    156,115,541     },
                                                              {    157,114,542     },
                                                              {    158,114,542     },
                                                              {    159,113,543     },
                                                              {    160,112,544     },
                                                              {    161,112,544     },
                                                              {    162,111,545     },
                                                              {    163,111,545     },
                                                              {    164,110,546     },
                                                              {    165,109,547     },
                                                              {    166,109,547     },
                                                              {    167,108,548     },
                                                              {    168,107,549     },
                                                              {    169,107,549     },
                                                              {    170,106,550     },
                                                              {    171,106,550     },
                                                              {    172,105,551     },
                                                              {    173,104,552     },
                                                              {    174,104,552     },
                                                              {    175,103,553     },
                                                              {    176,103,553     },
                                                              {    177,102,554     },
                                                              {    178,102,554     },
                                                              {    179,101,555     },
                                                              {    180,101,555     },
                                                              {    181,100,556     },
                                                              {    182,100,556     },
                                                              {    183,99,557      },
                                                              {    184,99,557      },
                                                              {    185,98,558      },
                                                              {    186,98,558      },
                                                              {    187,97,559      },
                                                              {    188,97,559      },
                                                              {    189,97,559      },
                                                              {    190,96,560      },
                                                              {    191,96,560      },
                                                              {    192,95,561      },
                                                              {    193,95,561      },
                                                              {    194,94,562      },
                                                              {    195,94,562      },
                                                              {    196,93,563      },
                                                              {    197,93,563      },
                                                              {    198,92,564      },
                                                              {    199,92,564      },
                                                              {    200,92,564      },
                                                              {    201,91,565      },
                                                              {    202,91,565      },
                                                              {    203,90,566      },
                                                              {    204,90,566      },
                                                              {    205,90,566      },
                                                              {    206,89,567      },
                                                              {    207,89,567      },
                                                              {    208,89,567      },
                                                              {    209,88,568      },
                                                              {    210,88,568      },
                                                              {    211,87,569      },
                                                              {    212,87,569      },
                                                              {    213,87,569      },
                                                              {    214,86,570      },
                                                              {    215,86,570      },
                                                              {    216,86,570      },
                                                              {    217,85,571      },
                                                              {    218,85,571      },
                                                              {    219,85,571      },
                                                              {    220,84,572      },
                                                              {    221,84,572      },
                                                              {    222,84,572      },
                                                              {    223,83,573      },
                                                              {    224,83,573      },
                                                              {    225,83,573      },
                                                              {    226,83,573      },
                                                              {    227,82,574      },
                                                              {    228,82,574      },
                                                              {    229,82,574      },
                                                              {    230,82,574      },
                                                              {    231,81,575      },
                                                              {    232,81,575      },
                                                              {    233,81,575      },
                                                              {    234,81,575      },
                                                              {    235,80,576      },
                                                              {    236,80,576      },
                                                              {    237,80,576      },
                                                              {    238,79,576      },
                                                              {    239,79,577      },
                                                              {    240,79,577      },
                                                              {    241,79,577      },
                                                              {    242,78,578      },
                                                              {    243,78,578      },
                                                              {    244,78,578      },
                                                              {    245,78,578      },
                                                              {    246,78,578      },
                                                              {    247,77,579      },
                                                              {    248,77,579      },
                                                              {    249,77,579      },
                                                              {    250,77,579      },
                                                              {    251,77,579      },
                                                              {    252,77,579      },
                                                              {    253,76,580      },
                                                              {    254,76,580      },
                                                              {    255,76,580      },
                                                              {    256,76,580      },
                                                              {    257,76,580      },
                                                              {    258,76,580      },
                                                              {    259,76,580      },
                                                              {    260,75,581      },
                                                              {    261,75,581      },
                                                              {    262,75,581      },
                                                              {    263,75,581      },
                                                              {    264,75,581      },
                                                              {    265,75,581      },
                                                              {    266,74,582      },
                                                              {    267,74,582      },
                                                              {    268,74,582      },
                                                              {    269,74,582      },
                                                              {    270,74,582      },
                                                              {    271,74,582      },
                                                              {    272,74,582      },
                                                              {    273,74,582      },
                                                            {    274,74,582      },
                                                            {    275,74,582      },
                                                            {    276,74,582      },
                                                            {    277,74,583      },
                                                            {    278,73,583      },
                                                            {    279,73,583      },
                                                            {    280,73,583      },
                                                            {    281,73,583      },
                                                            {    282,73,583      },
                                                            {    283,73,583      },
                                                            {    284,73,583      },
                                                            {    285,73,583      },
                                                            {    286,73,583      },
                                                            {    287,73,583      },
                                                            {    288,73,583      },
                                                            {    289,73,583      },
                                                            {    290,73,583      },
                                                            {    291,73,583      },
                                                            {    292,73,583      },
                                                            {    293,73,583      },
                                                            {    294,72,583      },
                                                            {    295,72,583      },
                                                            {    296,72,583      },
                                                            {    297,73,583      },
                                                            {    298,73,583      },
                                                            {    299,73,583      },
                                                            {    300,73,583      },
                                                            {    301,73,583      },
                                                            {    302,73,583      },
                                                            {    303,73,583      },
                                                            {    304,73,583      },
                                                            {    305,73,583      },
                                                            {    306,73,583      },
                                                            {    307,73,583      },
                                                            {    308,73,583      },
                                                            {    309,73,583      },
                                                            {    310,73,583      },
                                                            {    311,73,583      },
                                                            {    312,73,583      },
                                                            {    313,73,583      },
                                                            {    314,73,583      },
                                                            {    315,73,583      },
                                                            {    316,73,583      },
                                                            {    317,74,582      },
                                                            {    318,74,582      },
                                                            {    319,74,582      },
                                                            {    320,74,582      },
                                                            {    321,74,582      },
                                                            {    322,74,582      },
                                                            {    323,74,582      },
                                                            {    324,74,582      },
                                                            {    325,74,582      },
                                                            {    326,74,582      },
                                                            {    327,74,582      },
                                                            {    328,74,582      },
                                                            {    329,75,581      },
                                                            {    330,75,581      },
                                                            {    331,75,581      },
                                                            {    332,75,581      },
                                                            {    333,75,581      },
                                                            {    334,75,581      },
                                                            {    335,76,580      },
                                                            {    336,76,580      },
                                                            {    337,76,580      },
                                                            {    338,76,580      },
                                                            {    339,76,580      },
                                                            {    340,76,580      },
                                                            {    341,76,580      },
                                                            {    342,77,579      },
                                                            {    343,77,579      },
                                                            {    344,77,579      },
                                                            {    345,77,579      },
                                                            {    346,77,579      },
                                                            {    347,77,579      },
                                                            {    348,78,578      },
                                                            {    349,78,578      },
                                                            {    350,78,578      },
                                                            {    351,78,578      },
                                                            {    352,78,578      },
                                                            {    353,79,577      },
                                                            {    354,79,577      },
                                                            {    355,79,577      },
                                                            {    356,80,576      },
                                                            {    357,80,576      },
                                                            {    358,80,576      },
                                                            {    359,80,576      },
                                                            {    360,81,575      },
                                                            {    361,81,575      },
                                                            {    362,81,575      },
                                                            {    363,81,575      },
                                                            {    364,82,574      },
                                                            {    365,82,574      },
                                                            {    366,82,574      },
                                                            {    367,82,574      },
                                                            {    368,83,573      },
                                                            {    369,83,573      },
                                                            {    370,83,573      },
                                                            {    371,83,573      },
                                                            {    372,84,572      },
                                                            {    373,84,572      },
                                                            {    374,84,572      },
                                                            {    375,85,571      },
                                                            {    376,85,571      },
                                                            {    377,85,571      },
                                                            {    378,86,570      },
                                                            {    379,86,570      },
                                                            {    380,86,570      },
                                                            {    381,87,569      },
                                                            {    382,87,569      },
                                                            {    383,87,569      },
                                                            {    384,88,568      },
                                                            {    385,88,568      },
                                                            {    386,89,567      },
                                                            {    387,89,567      },
                                                            {    388,89,567      },
                                                            {    389,90,566      },
                                                            {    390,90,566      },
                                                            {    391,90,566      },
                                                            {    392,91,565      },
                                                            {    393,91,565      },
                                                            {    394,92,564      },
                                                            {    395,92,564      },
                                                            {    396,92,564      },
                                                            {    397,93,563      },
                                                            {    398,93,563      },
                                                            {    399,94,562      },
                                                            {    400,94,562      },
                                                            {    401,95,561      },
                                                            {    402,95,561      },
                                                            {    403,96,560      },
                                                            {    404,96,560      },
                                                            {    405,97,559      },
                                                            {    406,97,559      },
                                                            {    407,97,559      },
                                                            {    408,98,558      },
                                                            {    409,98,558      },
                                                            {    410,99,557      },
                                                            {    411,99,557      },
                                                            {    412,100,556     },
                                                            {    413,100,556     },
                                                            {    414,101,555     },
                                                            {    415,101,555     },
                                                            {    416,102,554     },
                                                            {    417,102,554     },
                                                            {    418,103,553     },
                                                            {    419,103,553     },
                                                            {    420,104,552     },
                                                            {    421,104,552     },
                                                            {    422,105,551     },
                                                            {    423,106,550     },
                                                            {    424,106,550     },
                                                            {    425,107,549     },
                                                            {    426,107,549     },
                                                            {    427,108,548     },
                                                            {    428,109,547     },
                                                            {    429,109,547     },
                                                            {    430,110,546     },
                                                            {    431,111,545     },
                                                            {    432,111,545     },
                                                            {    433,112,544     },
                                                            {    434,112,544     },
                                                            {    435,113,543     },
                                                            {    436,114,542     },
                                                            {    437,114,542     },
                                                            {    438,115,541     },
                                                            {    439,115,541     },
                                                            {    440,116,540     },
                                                            {    441,117,539     },
                                                            {    442,118,538     },
                                                            {    443,118,538     },
                                                            {    444,119,537     },
                                                            {    445,120,536     },
                                                            {    446,120,536     },
                                                            {    447,121,535     },
                                                            {    448,122,534     },
                                                            {    449,123,533     },
                                                            {    450,123,533     },
                                                            {    451,124,532     },
                                                            {    452,125,531     },
                                                            {    453,126,530     },
                                                            {    454,126,530     },
                                                            {    455,127,529     },
                                                            {    456,128,528     },
                                                            {    457,129,527     },
                                                            {    458,129,527     },
                                                            {    459,130,526     },
                                                            {    460,131,525     },
                                                            {    461,132,524     },
                                                            {    462,133,523     },
                                                            {    463,134,522     },
                                                            {    464,135,521     },
                                                            {    465,136,520     },
                                                            {    466,136,520     },
                                                            {    467,137,519     },
                                                            {    468,138,518     },
                                                            {    469,139,517     },
                                                            {    470,140,516     },
                                                            {    471,141,515     },
                                                            {    472,142,514     },
                                                            {    473,143,513     },
                                                            {    474,144,512     },
                                                            {    475,145,511     },
                                                            {    476,146,510     },
                                                            {    477,146,510     },
                                                            {    478,147,509     },
                                                            {    479,148,508     },
                                                            {    480,150,506     },
                                                            {    481,151,505     },
                                                            {    482,152,504     },
                                                            {    483,153,503     },
                                                            {    484,154,502     },
                                                            {    485,155,501     },
                                                            {    486,156,500     },
                                                            {    487,157,499     },
                                                            {    488,158,498     },
                                                            {    489,159,497     },
                                                            {    490,161,495     },
                                                            {    491,162,494     },
                                                            {    492,163,493     },
                                                            {    493,164,492     },
                                                            {    494,165,491     },
                                                            {    495,166,490     },
                                                            {    496,168,488     },
                                                            {    497,169,487     },
                                                            {    498,170,486     },
                                                            {    499,172,484     },
                                                            {    500,173,483     },
                                                            {    501,174,482     },
                                                            {    502,176,480     },
                                                            {    503,177,479     },
                                                            {    504,178,478     },
                                                            {    505,180,476     },
                                                            {    506,181,475     },
                                                            {    507,182,474     },
                                                            {    508,184,472     },
                                                            {    509,185,471     },
                                                            {    510,187,469     },
                                                            {    511,188,468     },
                                                            {    512,190,466     },
                                                            {    513,192,464     },
                                                            {    514,193,463     },
                                                            {    515,195,461     },
                                                            {    516,197,459     },
                                                            {    517,198,458     },
                                                            {    518,200,456     },
                                                            {    519,201,455     },
                                                            {    520,203,453     },
                                                            {    521,205,451     },
                                                            {    522,206,450     },
                                                            {    523,209,447     },
                                                            {    524,211,445     },
                                                            {    525,213,443     },
                                                            {    526,215,441     },
                                                            {    527,217,439     },
                                                            {    528,219,437     },
                                                            {    529,221,435     },
                                                            {    530,223,433     },
                                                            {    531,225,431     },
                                                            {    532,227,429     },
                                                            {    533,229,427     },
                                                            {    534,232,424     },
                                                            {    535,235,421     },
                                                            {    536,238,418     },
                                                            {    537,240,416     },
                                                            {    538,243,413     },
                                                            {    539,246,410     },
                                                            {    540,248,408     },
                                                            {    541,251,405     },
                                                            {    542,254,402     },
                                                            {    543,258,398     },
                                                            {    544,262,394     },
                                                            {    545,266,390     },
                                                            {    546,270,386     },
                                                            {    547,274,382     },
                                                            {    548,278,378     },
                                                            {    549,285,371     },
                                                            {    550,291,365     },
                                                            {    551,289,358     },
                                                            {    552,309,340     } };



        //public WgetService(IConfiguration configuration, ISqliteService myDb, IMsSqlService mySqlDb, AllarmiSMS mySms)
        public WgetService(IConfiguration configuration, IMsSqlService mySqlDb, AllarmiSMS mySms, IAdoMeteoService servizioMeteo, SendSmsMail sendSmsMail, ILogger<WgetService> logger)
        {
            this.configuration = configuration;
            //this.myDb = myDb;
            this.mySms = mySms;
            this.mySqlDb = mySqlDb;
            this.servizioMeteo = servizioMeteo;
            _sendSmsMail = sendSmsMail;
            _logger = logger;
        }
        public Task StartAsync(CancellationToken cancellationToken)
        {

            int _tmrInterval = Convert.ToInt16(configuration["Opzioni:TimerWgetService"]);
            _timer = new Timer(DoWork, null, TimeSpan.Zero, TimeSpan.FromSeconds(_tmrInterval));

            return Task.CompletedTask;
        }

        public Task StopAsync(CancellationToken stoppingToken)
        {

            _timer?.Change(Timeout.Infinite, 0);

            return Task.CompletedTask;

        }

        public void Dispose()
        {
            _timer?.Dispose();
        }

        private void DoWork(object state)
        {

            //ClearDirectory();   //spostato nella gestione del download nuova immagine
            //Thread.Sleep(2000);
            Thread.Sleep(1000);

            execWget();

            Thread.Sleep(10000);

            MatchImages();

        }
        public static bool CheckConnection(ApplicationDbContext context)
        {

            try
            {
                //context.Database.OpenConnection();
                //context.Database.CloseConnection();
                return context.Database.CanConnect();
            }
            catch (SqlException)
            {
                return false;
            }


        }
        private void ComponiInviaSMS(string testoSms)
        {
            var optionsBuilder = new DbContextOptionsBuilder<ApplicationDbContext>();
            optionsBuilder.UseSqlServer(configuration.GetConnectionString("DefaultConnection"));
            //_logger.LogInformation(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>MyServiceReader connection:" + Configuration.GetConnectionString("DefaultConnection"));

            ApplicationDbContext context = new ApplicationDbContext(optionsBuilder.Options);

            if (!CheckConnection(context))
            {
                _logger.LogInformation(">>>>>>>>>> Database non accessibile");
            }
            else
            {
                if (test)
                {
                    rubrica = new List<Rubrica>();
                    rubrica.Add(new Rubrica
                    {
                        Name = "test",
                        Mansione = "test",
                        Matricola = "1111",
                        MobilePhone1 = "3316273753",
                        MobilePhone2 = "",
                        Email = "",
                        Sms = true
                    });

                }
                else
                {
                    rubrica = context.Rubrica.Where(s => s.Sms == true).ToList();
                }
                _logger.LogInformation(">>>>>>>>>> rubrica invio sms lampinet: " + rubrica.Count());

            }

            List<ContattoInviato> SmsInviati = new List<ContattoInviato>();
            _sendSmsMail.Send(SmsInviati, rubrica, testoSms, testoSms);


            if (CheckConnection(context))
            {

                SmsInviati.ForEach(c =>
                {
                    context.Add(c);
                    _logger.LogInformation(">>>>>>>>>> sms inviato lampinet: " + c.Name + " " + c.Testosms);

                });
                context.SaveChanges();
                context.Dispose();
            }

        }
        private void ClearDirectory()
        {
            try
            {
                GC.Collect();
                // Cancello le vecchie immagini
                //string _path = @"C:\ImmaginiMeteo";
                string _path = "wwwroot/ImmaginiMeteo";
                string[] files = Directory.GetFiles(_path);
                foreach (string file in files)
                {
                    File.Delete(file);
                }
            }
            catch (IOException ex)
            {
                _logger.LogError(ex, "ClearDirectory");

            }

        }
        private static bool UploadFile(IFormFile ufile)
        {
            if (ufile != null && ufile.Length > 0)
            {
                var fileName = Path.GetFileName(ufile.FileName);
                var filePath = Path.Combine(Directory.GetCurrentDirectory(), @"wwwroot\ImmaginiMeteo", fileName);
                using (var fileStream = new FileStream(filePath, FileMode.Create))
                {
                    ufile.CopyTo(fileStream);
                }
                return true;
            }
            return false;
        }
        private static List<string> Extract(string html)
        {
            List<string> list = new List<string>();

            Regex regex = new Regex("(?:href)=[\"|']?(.*?)[\"|'|>]+", RegexOptions.Singleline | RegexOptions.CultureInvariant);
            //Regex regex = new Regex("/\".(jpg | png | gif)\b /", RegexOptions.Singleline | RegexOptions.CultureInvariant);
            //Regex regex = new Regex("(http(s?):)([/|.|\"w|\"s|-])*\".(?:jpg|gif|png)", RegexOptions.Singleline | RegexOptions.CultureInvariant);
            if (regex.IsMatch(html))
            {
                foreach (Match match in regex.Matches(html))
                    if (match.Groups[1].Value.ToLower().Contains(".png"))
                    {
                        list.Add(match.Groups[1].Value);
                        // _logger.LogInformation("Image file Add: " + match.Groups[1].Value);
                    }
            }

            return list;
        }
        private void execWget()
        {
            try
            {

                /// Nuovo codice per non usare wget per fare upload file

                string sorgenteimmagini = "http://meteoam.gruppoilva.int/wp-content/uploads/frames/LAM_TA/LATEST_48_FRAMES_4h/";

                HttpClient client = new HttpClient();
                client.BaseAddress = new Uri(sorgenteimmagini);
                client.DefaultRequestHeaders.Accept.Clear();
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage ResponseMessage = client.GetAsync(sorgenteimmagini).Result; // The .Result part will make this method not async
                if (ResponseMessage.IsSuccessStatusCode)
                {
                    var ResponseData = ResponseMessage.Content.ReadAsStringAsync().Result;
                    //_logger.LogInformation("ResponseData: " + ResponseData);

                    var listimage = Extract(ResponseData);


                    ///////// Inutile scaricare tutte le immagini prendo solo l'ultima
                    //foreach (string fileName in listimage)
                    //{
                    //    WebClient webClient = new WebClient();
                    //    {
                    //        webClient.DownloadFile(sorgenteimmagini + fileName, @"wwwroot\ImmaginiMeteo\" + fileName);
                    //    }

                    //}

                    ///////// Scarico solo ultima immagine
                    var fileName = (from f in listimage orderby f descending select f).FirstOrDefault();
                    if (!File.Exists(@"wwwroot\ImmaginiMeteo\" + fileName))
                    {
                        _logger.LogInformation("File non esiste: " + fileName);
                        ClearDirectory();
                        WebClient webClient = new WebClient();
                        {
                            imageUrl = sorgenteimmagini + fileName;
                            webClient.DownloadFile(imageUrl, @"wwwroot\ImmaginiMeteo\" + fileName);
                            Stream stream = webClient.OpenRead(imageUrl);
                            bitmap = new Bitmap(stream);
                            stream.Flush();
                            stream.Close();
                        }
                    }
                    else
                    {
                        _logger.LogInformation("File esiste: " + fileName);
                    }

                }

                //////////////// Disabilitato uso di wget
                ///
                //// Utilizzo Wget per scaricare le immagini dal sito dell'Aeronautica
                //string command = @"wget.exe -r -l1 --no-parent ‐‐no-directories -A.png -P ""wwwroot/ImmaginiMeteo"" + ""http://meteoam.gruppoilva.int/wp-content/uploads/frames/LAM_TA/LATEST_48_FRAMES_4h/""";
                //_logger.LogInformation("comando: "+command);
                //procStartInfo = new System.Diagnostics.ProcessStartInfo("cmd", "/c " + command);

                //procStartInfo.RedirectStandardOutput = true;
                //procStartInfo.UseShellExecute = false;
                //// Non crea la finestra del prompt dei comandi
                //procStartInfo.CreateNoWindow = false;
                ////Creo il processo, lo assegno alla sua ProcessStartInfo e lo avvio
                //proc = new System.Diagnostics.Process();
                //proc.StartInfo = procStartInfo;
                //proc.Start();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "execWget");
            }

        }
        private void MatchImages()
        {
            try
            {
                string[] nomiF = Directory.GetFiles("wwwroot/ImmaginiMeteo", "*.png");
                /*
                * utilizzando linq ordino l'array in base al nome file, che contiene la data, in
                * modi da prendere in considerazione il più recente
                */
                var sorted = (from f in nomiF orderby f descending select f).FirstOrDefault();
                var ImageIsDifferent = servizioMeteo.ImageIsDifferent(sorted);
                _logger.LogInformation("Immagine " + sorted + " è una nuova immagine non ancora processata? " + ImageIsDifferent);

                //_logger.LogInformation("ESITONO NELL'ORA INVIO SOTTO 3: " + servizioMeteo.ReadMaxInvioSMS(3));

                if (test || ImageIsDifferent)
                {
                    Bitmap immagineCampione = (Bitmap)Bitmap.FromFile("wwwroot/ImmagineCampione.png");

                    //TODO:CONTROLLARE SE SORTED E' VALORIZZATO
                    Bitmap Immagine2 = (Bitmap)Bitmap.FromFile(sorted);

                    myTuple = CompareImages(immagineCampione, Immagine2, 0);
                    //string myfName = myTuple.Item6.ToString();
                    if ((myTuple != null) && !String.IsNullOrEmpty(sorted))
                    {
                        //    // TODO: L'INSERIMENTO NEL DB SQLITE SARA' INUTILE QUANDO IL SERVIZIO SARA' OSPITATO DAL PGM METEO
                        //    _QRY = "INSERT INTO Eventi (DataOra, Evento, Zona1, Zona2, Zona3, Zona4, TotaleZone, ImgEsaminata, NomeImmagine) VALUES (@DataOra, @Evento, @Zona1, @Zona2, @Zona3, @Zona4, @TotaleZone, @ImgEsaminata, @NomeImmagine)";

                        //    mySqlDb.ExecuteQueryMeteo(_QRY, DateTime.Now, "Elaborazione immagine", myTuple.Item1, myTuple.Item2, myTuple.Item3, myTuple.Item4, myTuple.Item5, myTuple.Item6, sorted);


                        //_QRY = "INSERT INTO Eventi (DataOra, Evento, Zona1, Zona2, Zona3, Zona4, TotaleZone, ImgEsaminata, NomeImmagine) VALUES (@DataOra, @Evento, @Zona1, @Zona2, @Zona3, @Zona4, @TotaleZone, @ImgEsaminata, @NomeImmagine)";
                        _QRY = "INSERT INTO Eventi (DataOra, Evento, ImgEsaminata, NomeImmagine, ScaricheElettriche, ConteggioInvioSMS) VALUES (@DataOra, @Evento, @ImgEsaminata, @NomeImmagine, @ScaricheElettriche, @ConteggioInvioSMS)";

                        int _ScaricheElettriche = Convert.ToInt32(myTuple.Item1);

                        mySqlDb.ExecuteQueryMeteo(_QRY, DateTime.Now, "Elaborazione immagine", myTuple.Item2, sorted, Convert.ToInt32(myTuple.Item1), myTuple.Item3);
                        //mySqlDb.ExecuteQueryMeteo(_QRY, DateTime.Now, "Elaborazione immagine");


                    }

                }


            }
            catch (SqliteException ex)
            {
                _logger.LogError(ex, "MatchImages");
            }
            catch (Exception ex1)
            {
                _logger.LogError(ex1, "MatchImages");
            }
        }



        public Tuple<bool, Bitmap, int> CompareImages(Bitmap InputImage1, Bitmap InputImage2, int Tollerance = 0)
        {
            bool _AllarmeLampinet = false;
            Tuple<bool, Bitmap, int> myTuple = null;
            try
            {

                // Ridimensiono le immagini ad una dimensione di 600*600

                Bitmap Image1 = new Bitmap(InputImage1, new Size(600, 600));
                Bitmap Image2 = new Bitmap(InputImage2, new Size(600, 600));

                //Calcolo il size delle immagini: mi servirà per il calcolo della percentusle
                int Image1Size = Image1.Width * Image1.Height;
                int Image2Size = Image2.Width * Image2.Height;


                // Il controllo seguente è inutile in caso di immagini con identico size
                if (Image1Size > Image2Size)
                {
                    Image1 = new Bitmap(Image1, Image2.Size);
                }
                else
                {
                    Image1 = new Bitmap(Image1, Image2.Size);
                }

                /*
                 * Loop sui pixel di Immagine 1 e Immagine2
                 * Per ogni pixel delle due immagini:
                 * assumo la rappresentazione argb dei 2 pixel
                 * Sottraggo i valori di red, green, blue e creo
                 * una nuova immagine con i risultati delle sottrazioni.
                 * In questo modo l'Immagine3 avrà neri tutti i pixel che risultano uguali
                 * (La differenza tra i colori di due pixel uguali sarà 0, che corrisponde al nero);
                 * e di colore diverso i pixel differenti
                 */
                for (int x = 0; x < Image1.Width; x++)
                {

                    if (!_AllarmeLampinet)
                    {
                        for (int y = 0; y < Image1.Height; y++)
                        {
                            Color Color1 = Image1.GetPixel(x, y);
                            Color Color2 = Image2.GetPixel(x, y);
                            if (Color1 != Color2)
                            {
                                /*
                                 * Verifico se il pixel diverso cade aall'interno della zona 3 
                                 * (che comprende anche zona 1 e zona 2). Se è così, esco dal ciclo 
                                 * e restituisco true
                                 */
                                if (x > 0 && y > 60)
                                {
                                    if (LampoInZona(x, y, 3))
                                    {
                                        _AllarmeLampinet = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }

                _ContInvioSMS = 0;  //scrivo zero invio in db se non presente allarme


                if (test)
                {
                    _AllarmeLampinet = true;
                }

                if (_AllarmeLampinet)   //2020-09-28 su richiesta di Del Buono modificato modello di calcolo per gestire circonferenza
                //if (myTuple.Item1)      //L'ELEMENTO 1 DELLA TUPLA E' IL BOOLEANO CHE INDICA SE C'E' STATO UN EVENTO DI SCARICHE ELETTRICHE
                {


                    int _MaxSms = Convert.ToInt16(configuration["Opzioni:MaxSms"]);

                    if (servizioMeteo.ReadMaxInvioSMS(_MaxSms))//Controllo se il max num di sms si è protratto per più di un'ora altrimenti azzero e ricomincio invio
                    {
                        _ContInvioSMS = servizioMeteo.ReadInvioSMS();
                    }


                    _logger.LogInformation("Conteggio sms ultimo: " + _ContInvioSMS.ToString());

                    if (_ContInvioSMS < _MaxSms)                           //Non ho ancora effettuato i 3 invii
                    {
                        _ContInvioSMS++;

                        //if (_ContInvioSMS == _MaxSms)                       //Ho raggiunto i tre invii. Acquisisco l'orario
                        //{ _OrarioTerzoInvioSms = DateTime.Now; }

                        //string testoSms = "EMERGENZA LAMPINET " + _ContInvioSMS + "° AVVISO";

                        testoSms = "EMERGENZA LAMPINET ";
                        if (test)
                        {
                            testoSms = "TEST EMERGENZA LAMPINET " + _ContInvioSMS + "° AVVISO";
                        }

                        ComponiInviaSMS(testoSms);
                        /*
                        15-11-2020 MODIFICA DELL'INVIO SMS
                        OGNI VOLTA CHE SI RILEVA LA PRESENZA DI UN FULMINE SULLA MAPPA
                        VIENE INVIATO L'SMS DI ALLARME. SE DA QUESTO ISTANTE TRASCORRERA' 
                        UN'ORA SENZA CHE VENGA RILEVATA LA PRESENZA DI UN FULMINE, VERRA' 
                        INVIATO UN SMS DI FINE ALLARME 
                        */

                        _oraInizioEventoLampinet = DateTime.Now;
                        _eventoInCorso = true;

                        _IsAllarmeInCorso = servizioMeteo.isAllarmeInCorso();

                        // ---------------------------------------INIZIO SEQUENZA------------------------------------------------------

                        InizioSequenza();

                        _logger.LogInformation("Inizio Sequenza");


                    }

                    //int _MaxSms = Convert.ToInt16(configuration["Opzioni:MaxSms"]);

                    ////Recupero la lista dei contatti. Dato il poco carico, la recupero prima di ogni invio per essere sicuro di non perdere contatti!!
                    //List<ContattoViewModel> miaListaContatti = getContatti();


                    //if (_ContInvioSMS < _MaxSms)                           //Non ho ancora effettuato i 3 invii
                    //{
                    //    _ContInvioSMS++;
                    //    if (_ContInvioSMS == _MaxSms)                       //Ho raggiunto i tre invii. Acquisisco l'orario
                    //    { _OrarioTerzoInvioSms = DateTime.Now; }
                    //    string testoSms = "EMERGENZA LAMPINET " + _ContInvioSMS + "° AVVISO";

                    //    string retVal = mySms.ComponiInviaSMS(testoSms, "3355948856");  //LO MANDO ANCHE A ME!
                    //    retVal = mySms.ComponiInviaSMS(testoSms, "3316273753");  //LO MANDO ANCHE A ME2!
                    //    foreach (ContattoViewModel contatto in miaListaContatti)
                    //    {
                    //        /*
                    //         * Ciclo nella lista dei contatti: se il contatto ha
                    //         * valorizzato un numero di telefono, invio l'sms
                    //         */
                    //        if (!string.IsNullOrEmpty(contatto.MobilePhone1))
                    //            _result = mySms.ComponiInviaSMS(testoSms, contatto.MobilePhone1);   //riabilitato   <<<< disabilitato per poter fare prove
                    //        Log.Information("Inviato SMS a " + contatto.Name);
                    //    }
                    //}
                    else            //Se ho raggiunto i 3 invii, devo interrompere gli invii per un'ora
                    {
                        //if (DateTime.Now > _OrarioTerzoInvioSms.AddHours(1))        //Trascorsa un'ora dall'ultimo invio, azzero il contatore 
                        //{
                        //   _ContInvioSMS = 0; 
                        //    _OrarioTerzoInvioSms = DateTime.Now;                    //Aggiunto 23/09/2020
                        //}
                    }
                }
                else
                {
                    /*
                     * Acquisisco i minuti che intercorrono tra l'ora attuale e l'ultimo evento di scariche elettriche.
                     * Se ho un evento in corso e sono trascorsi tra i 60 e i 75 minuti invio il messaggio di fine allerta.
                     * Con questo controllo maccheronico spero di impedire la partenza del doppio maessaggio di fine allerta,
                     * dovuto al fatto che il programma gira contemporaneamente su due PC e con il load balancing spesso il
                     * controllo rimbalza tra un server e l'altro
                     * 
                     * TODO: Per rendere definitiva la risoluzione del problema devo approntare una tabella contenente per ogni 
                     * sequenza l'ora di inizio e l'ora di fine. Trascorsa un'ora dall'ultima scarica elettrica,
                     * invio il messaggio di fine allerta e valorizzo l'ora di fine sequenza. In questo modo il messaggio partirà
                     * solo se come condizione ha una sequenza in corso (Ora di inizio valorizzata, ma senza ora di fine)
                     */
                    // ---------------------------------------FINE SEQUENZA------------------------------------------------------
                    _IsAllarmeInCorso = servizioMeteo.isAllarmeInCorso();

                    if (_IsAllarmeInCorso)
                    {
                        int _minutiDaUltimaScarica = servizioMeteo.daUltimaSequenza();
                        if (_minutiDaUltimaScarica >= 60)
                        {
                            FineSequenza();
                            testoSms = "FINE EMERGENZA LAMPINET ";
                            ComponiInviaSMS(testoSms);
                        }
                    }
                }
                //else
                //{
                //    if (_ContInvioSMS != 0) { _ContInvioSMS = 0; }
                //}

                myTuple = Tuple.Create(_AllarmeLampinet, Image2, _ContInvioSMS);
            }

            catch (Exception ex)
            {
                string myErr = ex.Message;
            }

            return myTuple;
        }
        private bool LampoInZona(int Px, int Py, int nZona)
        {
            int yMin = 0;
            int yMax = 0;
            int y1Min = 0;
            int y1Max = 0;
            string fileToParse = "";
            bool _puntoInterno = false;

            try
            {
                /*
                 * Effettuo un loop che va dalla seconda riga all'ultima riga contenente valori
                 * Parto dalla riga 2 per saltare la prima riga che contiene le intestazioni
                 */
                for (int i = 0; i <= 510; i++)
                {
                    /*
                     * Cerco la riga che contiene le coordinate relative a x.
                     * Se la trovo, valorizzo i valori di ymin, ymax, y1min, y1max
                     * Se non esiste, vuol dire che il punto considerato è esterno alla circonferenza+
                     */
                    int xValue = _coordinateCirconferenza[i, 0];
                    if (xValue == Px)
                    {
                        yMin = _coordinateCirconferenza[i, 1];
                        y1Max = _coordinateCirconferenza[i, 2];
                        break;
                    }
                }

                if (yMin != 0)      //Se la variabile ymin è stata valorizzata vuol dire che la coordinata x del punto in esame è compresa nel range xMin e xMax
                {
                    if ((Py >= yMin) && (Py <= y1Max))
                    {
                        _puntoInterno = true; // IL PUNTO E' INTERNO ALLA CIRCONFERENZA
                    }
                    else
                    {
                        _puntoInterno = false; // IL PUNTO E' ESTERNO ALLA CIRCONFERENZA
                    }
                }
                else
                {
                    _puntoInterno = false; // IL PUNTO E' ESTERNO ALLA CIRCONFERENZA
                }

            }
            catch (Exception ex)
            {
                _puntoInterno = false;
            }

            return _puntoInterno;
        }

        private void InizioSequenza()
        {

            _QRY = "BEGIN " +
                   "   IF EXISTS(SELECT TOP 1 * FROM SequenzeAllertaLampinet " +
                   "   WHERE DataOraInizioSequenza IS NULL " +
                   "   AND DataOraFineSequenza IS NULL) " +
                   "   BEGIN " +
                   "      UPDATE SequenzeAllertaLampinet " +
                   "         SET DataOraInizioSequenza = GETDATE() " +
                   "         WHERE IDSequenza = (SELECT TOP 1 IDSequenza " +
                   "                             FROM SequenzeAllertaLampinet " +
                   "                             WHERE DataOraInizioSequenza IS NULL " +
                   "                             AND DataOraFineSequenza IS NULL " +
                   "                             ORDER BY IDSequenza DESC) " +
                   "   END " +
                   "END";

            mySqlDb.ExecuteCommand(_QRY);

            _logger.LogInformation("Inizio Sequenza Lampinet");
        }

        private void FineSequenza()
        {

            _QRY = "BEGIN " +
                   "   IF EXISTS(SELECT TOP 1 * FROM SequenzeAllertaLampinet " +
                   "   WHERE DataOraInizioSequenza IS NOT NULL " +
                   "   AND DataOraFineSequenza IS NULL) " +
                   "   BEGIN " +
                   "      UPDATE SequenzeAllertaLampinet " +
                   "         SET DataOraFineSequenza = GETDATE() " +
                   "         WHERE IDSequenza = (SELECT TOP 1 IDSequenza " +
                   "                             FROM SequenzeAllertaLampinet " +
                   "                             WHERE DataOraInizioSequenza IS NOT NULL " +
                   "                             AND DataOraFineSequenza IS NULL " +
                   "                             ORDER BY IDSequenza DESC); " +
                   "                             INSERT INTO SequenzeAllertaLampinet(DataOraInizioSequenza, DataOraFineSequenza) VALUES(NULL, NULL);" +
                   "   END " +
                   "END";

            mySqlDb.ExecuteCommand(_QRY);

            _logger.LogInformation("Fine Sequenza Lampinet");
        }

        public int DaUltimaSequenza()
        {
            _QRY = "SELECT " +
                   "DATEDIFF(minute," +
                   "(SELECT TOP 1 DataOra FROM Eventi WHERE ScaricheElettriche > 0 ORDER BY idEvento DESC)," +
                   "getdate())" +
                   "AS differenzaInMinuti;";
            DataSet dataSet = mySqlDb.Query(_QRY);
            DataTable dt = dataSet.Tables[0];
            int diffInMinutes = Convert.ToInt32(dt.Rows[0][0] == DBNull.Value ? 0 : dt.Rows[0][0]);
            Console.WriteLine("Calcolata differenza in minuti da ultimo evento: " + diffInMinutes);
            return diffInMinutes;
        }


        //private int CheckZona(int x, int y)
        //{
        //    int _nZona = 0;
        //    if ((x >= 230 && x <= 357) && (y >= 267 && y <= 391))
        //    {
        //        //ZONA 1 (PIU' VICINA)
        //        _nZona = 1;
        //    }
        //    else if ((x >= 166 && x <= 420) && (y >= 200 && y <= 458))
        //    {
        //        //ZONA 2
        //        _nZona = 2;
        //    }
        //    else if ((x >= 40 && x <= 549) && (y >= 73 && y < 582))
        //    {
        //        //ZONA 3 (PIU' ESTERNA)
        //        _nZona = 3;
        //    }
        //    else
        //    {
        //        _nZona = 4;
        //    }
        //    return _nZona;
        //}
        //public Tuple<double, double, double, double, double, Bitmap> CompareImagesOLD(Bitmap InputImage1, Bitmap InputImage2, int Tollerance = 0)
        //{
        //    // Lascio la tolleranza a zero per prendere tutti gli eventi lampinet (sarà considerato anche un solo pixel diverso !!!)

        //    Tuple<double, double, double, double, double, Bitmap> myTuple = null;
        //    try
        //    {
        //        // Ridimensiono le immagini ad una dimensione di 600*600
        //        Bitmap Image1 = new Bitmap(InputImage1, new Size(600, 600));
        //        Bitmap Image2 = new Bitmap(InputImage2, new Size(600, 600));

        //        //Calcolo il size delle immagini: mi servirà per il calcolo della percentusle
        //        int Image1Size = Image1.Width * Image1.Height;
        //        int Image2Size = Image2.Width * Image2.Height;

        //        /*Le seguenti costanti rappresentano la superficie in pixel delle 3 zone,
        //         * rappresentate nella mappa con tre cerchi. Per la quarta zona, calcolo
        //         * la differenza tra la superficie totale (600*600) e quella delle tre zone
        //         */
        //        const int _zona1Size = 12463;
        //        const int _zona2Size = 52253;
        //        const int _zona3Size = 200988;
        //        const int _zona4Size = 94296;

        //        //Creo una terza bitmap che conterrà le sole differenze
        //        Bitmap Image3;

        //        int _nZona = 0;
        //        /*
        //         * 1= Zona Taranto
        //         * 2= Zona Massafra
        //         * 3= Zona Martina
        //         * 4= Zona periferica (ex Taranto)
        //        */
        //        double[] _diffPerZona = new double[5];
        //        /*
        //         * _diffPerZona[0] = Pixel diversi nella zona 1
        //         * _diffPerZona[1] = Pixel diversi nella zona 2 
        //         * _diffPerZona[2] = Pixel diversi nella zona 3
        //         * _diffPerZona[3] = Pixel diversi nella zona 4
        //         * _diffPerZona[4] = Totale dei pixel diversi in tutte le zone
        //        */

        //        // Il controllo seguente è inutile in caso di immagini con identico size
        //        if (Image1Size > Image2Size)
        //        {
        //            Image1 = new Bitmap(Image1, Image2.Size);
        //            Image3 = new Bitmap(Image2.Width, Image2.Height);
        //        }
        //        else
        //        {
        //            Image1 = new Bitmap(Image1, Image2.Size);
        //            Image3 = new Bitmap(Image2.Width, Image2.Height);
        //        }

        //        /*
        //         * Loop sui pixel di Immagine 1 e Immagine2
        //         * Per ogni pixel delle due immagini:
        //         * assumo la rappresentazione argb dei 2 pixel
        //         * Sottraggo i valori di red, green, blue e creo
        //         * una nuova immagine con i risultati delle sottrazioni.
        //         * In questo modo l'Immagine3 avrà neri tutti i pixel che risultano uguali
        //         * (La differenza tra i colori di due pixel uguali sarà 0, che corrisponde al nero);
        //         * e di colore diverso i pixel differenti
        //         */
        //        for (int x = 0; x < Image1.Width; x++)
        //        {
        //            for (int y = 0; y < Image1.Height; y++)
        //            {
        //                Color Color1 = Image1.GetPixel(x, y);
        //                Color Color2 = Image2.GetPixel(x, y);
        //                int r = Color1.R > Color2.R ? Color1.R - Color2.R : Color2.R - Color1.R;
        //                int g = Color1.G > Color2.G ? Color1.G - Color2.G : Color2.G - Color1.G;
        //                int b = Color1.B > Color2.B ? Color1.B - Color2.B : Color2.B - Color1.B;
        //                Image3.SetPixel(x, y, Color.FromArgb(r, g, b));
        //            }
        //        }

        //        //--------------TEST-------------------------------------------------------
        //        //Salvataggio dell'immagine, generata dal modello, contenente le differenze
        //        //Image3.Save("pippo.png");
        //        //-------------------------------------------------------------------------

        //        int Difference = 0;
        //        /*
        //         * Loop sull'immagine creata ah hoc:
        //         * Tutti i pixel uguali tra immagine1 e immagine2 saranno neri in immagine3 (La differenza
        //         * tra i colori di due pixel uguali sarà 0, che corrisponde al nero);
        //         * Quando verranno trovati pixel diversi tra immagine1 e immagine2, la differenza non sarà 0,
        //         * ed il nuovo pixel sarà quindi evidenziato in immagine3.
        //         * Ciclerò su ogni pixel di immagine3, facendo la media colore e confrontandola con la tolleranza:
        //         * imposto la tolleranza a 0 per evidenziare qualsiasi differenza
        //         */
        //        //--------------LOOP SUI PIXEL DELL'IMMAGINE 3---------------------------
        //        for (int x = 0; x < Image1.Width; x++)
        //        {
        //            for (int y = 0; y < Image1.Height; y++)
        //            {
        //                Color Color1 = Image3.GetPixel(x, y);
        //                int Media = (Color1.R + Color1.G + Color1.B) / 3;
        //                if (Media > Tollerance)
        //                {
        //                    //CONTROLLO IN QUALE PARTE DELLA MAPPA E' CADUTO IL LAMPO
        //                    _nZona = CheckZona(x, y);
        //                    if (_nZona == 1)
        //                    { _diffPerZona[0]++; }
        //                    else if (_nZona == 2)
        //                    { _diffPerZona[1]++; }
        //                    else if (_nZona == 3)
        //                    { _diffPerZona[2]++; }
        //                    else if (_nZona == 4)
        //                    { _diffPerZona[3]++; }
        //                    Difference++;
        //                }
        //            }
        //        }
        //        //---------------CALCOLO DELLA PERCENTUALE DI PIXEL DIFFERENTI-----------------
        //        double UsedSize = Image1Size > Image2Size ? Image2Size : Image1Size;
        //        // Calcolo la percentuale dei pixel differenti trovati
        //        double result = Difference * 100 / UsedSize;
        //        _diffPerZona[0] = Math.Round(_diffPerZona[0] * 100 / _zona1Size, 2);
        //        _diffPerZona[1] = Math.Round(_diffPerZona[1] * 100 / _zona2Size, 2);
        //        _diffPerZona[2] = Math.Round(_diffPerZona[2] * 100 / _zona3Size, 2);
        //        _diffPerZona[3] = Math.Round(_diffPerZona[3] * 100 / _zona4Size, 2);
        //        _diffPerZona[4] = Math.Round(_diffPerZona[0] + _diffPerZona[1] + _diffPerZona[2] + _diffPerZona[3], 2);

        //        myTuple = Tuple.Create(_diffPerZona[0], _diffPerZona[1], _diffPerZona[2], _diffPerZona[3], _diffPerZona[4], Image2);


        //        //if (_diffPerZona[1] > 0 || _diffPerZona[2] > 0)       //Presenza lampi in zona 2 o zona 3
        //        if (_diffPerZona[0] > 0 || _diffPerZona[1] > 0 || _diffPerZona[2] > 0)   //su richiesta di Del Buono aggiunta anche zona 1 01/09/2020
        //        {
        //            int _MaxSms = Convert.ToInt16(configuration["Opzioni:MaxSms"]);


        //            if (_ContInvioSMS < _MaxSms)                           //Non ho ancora effettuato i 3 invii
        //            {
        //                _ContInvioSMS++;
        //                if (_ContInvioSMS == _MaxSms)                       //Ho raggiunto i tre invii. Acquisisco l'orario
        //                { _OrarioTerzoInvioSms = DateTime.Now; }
        //                string testoSms = "EMERGENZA LAMPINET " + _ContInvioSMS + "° AVVISO";

        //                //string retVal = mySms.ComponiInviaSMS(testoSms, "3355948856");  //LO MANDO ANCHE A ME!
        //                //string retVal = mySms.ComponiInviaSMS(testoSms, "3316273753");  //LO MANDO ANCHE A ME2!
        //                ComponiInviaSMS(testoSms);
        //            }
        //            else            //Se ho raggiunto i 3 invii, devo interrompere gli invii per un'ora
        //            {
        //                if (DateTime.Now > _OrarioTerzoInvioSms.AddHours(1))        //Trascorsa un'ora dall'ultimo invio, azzero il contatore
        //                {
        //                    _ContInvioSMS = 0;
        //                }
        //            }
        //        }
        //        else
        //        {
        //            if (_ContInvioSMS != 0) { _ContInvioSMS = 0; }
        //        }

        //        return myTuple;
        //    }
        //    catch (Exception ex)
        //    {
        //        _logger.LogError(ex, "CompareImages");
        //    }
        //    return myTuple;
        //}
    }
}
